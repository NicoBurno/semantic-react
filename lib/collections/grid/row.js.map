{"version":3,"sources":["../../../src/components/collections/grid/row.jsx"],"names":[],"mappings":"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","file":"row.js","sourcesContent":["import React from 'react';\r\nimport { Numbers, validateClassProps } from '../../utilities';\r\nimport { defaultPropTypes, defaultPropValues } from '../../defaultProps';\r\nimport classNames from 'classnames';\r\nimport Radium from 'radium';\r\n\r\nconst validProps = {\r\n    aligned: ['right', 'left', 'center'],\r\n    valigned: ['top', 'middle', 'bottom']\r\n};\r\n\r\nfunction getClasses(props) {\r\n    let classes = {\r\n        row: props.defaultClasses,\r\n        centered: props.centered,\r\n        doubling: props.doubling,\r\n        stretched: props.stretched,\r\n        justified: props.justified\r\n    };\r\n    \r\n    if (props.columns && props.columns > 0 && props.columns <= 16) {\r\n        classes[`${Numbers[props.columns]} column`] = true;\r\n    }\r\n    \r\n    classes[props.color] = !!props.color;\r\n    \r\n    if (props.equal) {\r\n        classes['equal width'] = true;\r\n    }\r\n    \r\n    if (props.only) {\r\n        let device;\r\n        if (Array.isArray(props.only)) {\r\n            device = props.only.join(' ');\r\n        } else {\r\n            device = props.only;\r\n        }\r\n        if (device) {\r\n            classes[`${device} only`] = true;\r\n        }\r\n    }\r\n    \r\n    return validateClassProps(classes, props, validProps, {valigned: 'aligned'});\r\n}\r\n\r\n/**\r\n * Grid row\r\n * @param props\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nlet Row = (props) => {\r\n    /* eslint-disable no-use-before-define */\r\n    let {\r\n        aligned, component, centered, children, columns, defaultClasses, doubling, equal,\r\n        stretched, color, only, justified, ...other\r\n    } = props;\r\n    /* eslint-enable no-use-before-define */\r\n    \r\n    let Component = component;\r\n    other.className = classNames(other.className, getClasses(props));\r\n    \r\n    return (\r\n        <Component {...other}>\r\n            {children}\r\n        </Component>\r\n    );\r\n};\r\n\r\nRow.propTypes = {\r\n    ...defaultPropTypes,\r\n    /**\r\n     * Horizontal content alignment\r\n     */\r\n    aligned: React.PropTypes.oneOf(['right', 'left', 'center']),\r\n    /**\r\n     * Center columns in row\r\n     */\r\n    centered: React.PropTypes.bool,\r\n    /**\r\n     * Double column width on tablet and mobile sizes\r\n     */\r\n    doubling: React.PropTypes.bool,\r\n    /**\r\n     * Automatically resize elements to split the available width evently\r\n     */\r\n    equal: React.PropTypes.bool,\r\n    /**\r\n     * Only visible for types. Could be single type string or array, i.e. only={[\"mobile\",\"tablet\"]}\r\n     */\r\n    only: React.PropTypes.oneOfType([\r\n        React.PropTypes.oneOf([\r\n            'mobile', 'tablet', 'computer', 'large screen', 'widescreen'\r\n        ]),\r\n        React.PropTypes.arrayOf(React.PropTypes.oneOf([\r\n            'mobile', 'tablet', 'computer', 'large screen', 'widescreen'\r\n        ])) \r\n    ]),\r\n    /**\r\n     * Specify row columns count\r\n     */\r\n    columns: React.PropTypes.number,\r\n    /**\r\n     * Stretch content to take up the entire column height\r\n     */\r\n    stretched: React.PropTypes.bool,\r\n    /**\r\n     * Row color\r\n     */\r\n    color: React.PropTypes.string,\r\n    /**\r\n     * Justified content fits exactly inside the grid column, taking up the entire width from one side to the other\r\n     */\r\n    justified: React.PropTypes.bool,\r\n    /**\r\n     * Vertical content alignment\r\n     */\r\n    valigned: React.PropTypes.oneOf(['top', 'middle', 'bottom'])\r\n};\r\n\r\nRow.defaultProps = {\r\n    ...defaultPropValues\r\n};\r\n\r\nRow = Radium(Row);\r\nexport { Row };\r\n\r\n"]}