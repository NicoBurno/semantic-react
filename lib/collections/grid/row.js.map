{"version":3,"sources":["../../../src/components/collections/grid/row.jsx"],"names":[],"mappings":"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","file":"row.js","sourcesContent":["import React from 'react';\r\nimport { Numbers, validateClassProps } from '../../utilities';\r\nimport DefaultProps from '../../defaultProps';\r\nimport classNames from 'classnames';\r\n\r\nconst validProps = {\r\n    aligned: ['right', 'left', 'center'],\r\n    valigned: ['top', 'middle', 'bottom']\r\n};\r\n\r\nfunction getClasses(props) {\r\n    let classes = {\r\n        row: props.defaultClasses,\r\n        centered: props.centered,\r\n        doubling: props.doubling,\r\n        stretched: props.stretched,\r\n        justified: props.justified\r\n    };\r\n    \r\n    if (props.columns && props.columns > 0 && props.columns <= 16) {\r\n        classes[`${Numbers[props.columns]} column`] = true;\r\n    }\r\n    \r\n    classes[props.color] = !!props.color;\r\n    \r\n    if (props.equal) {\r\n        classes['equal width'] = true;\r\n    }\r\n    \r\n    if (props.only) {\r\n        let device;\r\n        if (Array.isArray(props.only)) {\r\n            device = props.only.join(' ');\r\n        } else {\r\n            device = props.only;\r\n        }\r\n        if (device) {\r\n            classes[`${device} only`] = true;\r\n        }\r\n    }\r\n    \r\n    return validateClassProps(classes, props, validProps, {valigned: 'aligned'});\r\n}\r\n\r\n/**\r\n * Grid row\r\n * @param props\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nlet Row = (props) => {\r\n    /* eslint-disable no-use-before-define */\r\n    let {\r\n        aligned, component, centered, children, columns, defaultClasses, doubling, equal,\r\n        stretched, color, only, justified, ...other\r\n    } = props;\r\n    /* eslint-enable no-use-before-define */\r\n    \r\n    let Component = component;\r\n    other.className = classNames(other.className, getClasses(props));\r\n    \r\n    return (\r\n        <Component {...other}>\r\n            {children}\r\n        </Component>\r\n    );\r\n};\r\n\r\nRow.propTypes = {\r\n    ...DefaultProps.propTypes,\r\n    /**\r\n     * Horizontal content alignment\r\n     */\r\n    aligned: React.PropTypes.oneOf(['right', 'left', 'center']),\r\n    /**\r\n     * Center columns in row\r\n     */\r\n    centered: React.PropTypes.bool,\r\n    /**\r\n     * Double column width on tablet and mobile sizes\r\n     */\r\n    doubling: React.PropTypes.bool,\r\n    /**\r\n     * Automatically resize elements to split the available width evently\r\n     */\r\n    equal: React.PropTypes.bool,\r\n    /**\r\n     * Only visible for types. Could be single type string or array, i.e. only={[\"mobile\",\"tablet\"]}\r\n     */\r\n    only: React.PropTypes.oneOfType([\r\n        React.PropTypes.oneOf([\r\n            'mobile', 'tablet', 'computer', 'large screen', 'widescreen'\r\n        ]),\r\n        React.PropTypes.arrayOf(React.PropTypes.oneOf([\r\n            'mobile', 'tablet', 'computer', 'large screen', 'widescreen'\r\n        ])) \r\n    ]),\r\n    /**\r\n     * Specify row columns count\r\n     */\r\n    columns: React.PropTypes.number,\r\n    /**\r\n     * Stretch content to take up the entire column height\r\n     */\r\n    stretched: React.PropTypes.bool,\r\n    /**\r\n     * Row color\r\n     */\r\n    color: React.PropTypes.string,\r\n    /**\r\n     * Justified content fits exactly inside the grid column, taking up the entire width from one side to the other\r\n     */\r\n    justified: React.PropTypes.bool,\r\n    /**\r\n     * Vertical content alignment\r\n     */\r\n    valigned: React.PropTypes.oneOf(['top', 'middle', 'bottom'])\r\n};\r\n\r\nRow.defaultProps = {\r\n    ...DefaultProps.defaultProps\r\n};\r\n\r\nexport default Row;\r\n\r\n"]}