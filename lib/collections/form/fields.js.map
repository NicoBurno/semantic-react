{"version":3,"sources":["../../../src/components/collections/form/fields.jsx"],"names":[],"mappings":";;;;;;qBAAkB,OAAO;;;;yBACc,iBAAiB;;qBAClC,SAAS;;0BACR,YAAY;;;;sBAChB,QAAQ;;;;AAE3B,SAAS,UAAU,CAAC,KAAK,EAAE;AACvB,QAAI,OAAO,GAAG;AACV,eAAO,EAAE,KAAK,CAAC,OAAO;AACtB,cAAM,EAAE,KAAK,CAAC,MAAM;KACvB,CAAC;;AAEF,QAAI,KAAK,CAAC,KAAK,EAAE;AACb,YAAI,UAAU,GAAG,8BAAc,KAAK,CAAC,QAAQ,eAAQ,CAAA;;AAErD,YAAI,UAAU,GAAG,CAAC,IAAK,UAAU,IAAI,EAAE,EAAE;AACrC,mBAAO,CAAC,mBAAQ,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;SACvC;KACJ;;AAED,QAAI,KAAK,CAAC,UAAU,EAAE;AAClB,eAAO,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC;KACjC;;AAED,WAAO,CAAC,MAAM,GAAG,KAAK,CAAC,cAAc,CAAC;;AAEtC,WAAO,OAAO,CAAC;CAClB;;AAED,IAAI,MAAM,GAAG,SAAT,MAAM,CAAI,KAAK,EAAK;;QAEd,QAAQ,GAAqC,KAAK,CAAlD,QAAQ;QAAE,SAAS,GAA0B,KAAK,CAAxC,SAAS;QAAE,SAAS,GAAe,KAAK,CAA7B,SAAS;;QAAK,KAAK,4BAAK,KAAK;;;AAExD,SAAK,CAAC,SAAS,GAAG,6BAAW,SAAS,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;;AAE3D,WAAO,mBAAM,aAAa,CACtB,SAAS,EACT,KAAK,EACL,QAAQ,CACX,CAAC;CACL,CAAC;;AAEF,MAAM,CAAC,SAAS,GAAG;AACf,YAAQ,EAAE,mBAAM,SAAS,CAAC,IAAI;AAC9B,aAAS,EAAE,mBAAM,SAAS,CAAC,GAAG;AAC9B,aAAS,EAAE,mBAAM,SAAS,CAAC,SAAS,CAAC,CACjC,mBAAM,SAAS,CAAC,OAAO,EACvB,mBAAM,SAAS,CAAC,MAAM,CACzB,CAAC;AACF,kBAAc,EAAE,mBAAM,SAAS,CAAC,IAAI;AACpC,cAAU,EAAE,mBAAM,SAAS,CAAC,IAAI;AAChC,SAAK,EAAE,mBAAM,SAAS,CAAC,IAAI;AAC3B,WAAO,EAAE,mBAAM,SAAS,CAAC,IAAI;AAC7B,UAAM,EAAE,mBAAM,SAAS,CAAC,IAAI;CAC/B,CAAA;;AAED,MAAM,CAAC,YAAY,GAAG;AAClB,aAAS,EAAE,KAAK;AAChB,kBAAc,EAAE,IAAI;CACvB,CAAA;;AAED,OAAO,CAAC,MAAM,GAAG,yBAAO,MAAM,CAAC,CAAC","file":"fields.js","sourcesContent":["import React from 'react';\r\nimport { countChildren, Numbers } from '../../utilities';\r\nimport { Field } from './field';\r\nimport classNames from 'classnames';\r\nimport Radium from 'radium';\r\n\r\nfunction getClasses(props) {\r\n    let classes = {\r\n        grouped: props.grouped,\r\n        inline: props.inline\r\n    };\r\n\r\n    if (props.fluid) {\r\n        let childCount = countChildren(props.children, Field)\r\n\r\n        if (childCount > 0  && childCount <= 12) {\r\n            classes[Numbers[childCount]] = true;\r\n        }\r\n    }\r\n\r\n    if (props.equalWidth) {\r\n        classes['equal width'] = true;\r\n    }\r\n\r\n    classes.fields = props.defaultClasses;\r\n\r\n    return classes;\r\n}\r\n\r\nlet Fields = (props) => {\r\n    /* eslint-disable no-use-before-define */\r\n    let { children, className, component, ...other } = props;\r\n    /* eslint-enable no-use-before-define */\r\n    other.className = classNames(className, getClasses(props));\r\n\r\n    return React.createElement(\r\n        component,\r\n        other,\r\n        children\r\n    );\r\n};\r\n\r\nFields.propTypes = {\r\n    children: React.PropTypes.node,\r\n    className: React.PropTypes.any,\r\n    component: React.PropTypes.oneOfType([\r\n        React.PropTypes.element,\r\n        React.PropTypes.string\r\n    ]),\r\n    defaultClasses: React.PropTypes.bool,\r\n    equalWidth: React.PropTypes.bool,\r\n    fluid: React.PropTypes.bool,\r\n    grouped: React.PropTypes.bool,\r\n    inline: React.PropTypes.bool\r\n}\r\n\r\nFields.defaultProps = {\r\n    component: 'div',\r\n    defaultClasses: true\r\n}\r\n\r\nexports.Fields = Radium(Fields);\r\n"]}