{"version":3,"sources":["../../../src/components/modules/dropdown/select.jsx"],"names":[],"mappings":"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","file":"select.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Icon, Label } from '../../elements';\nimport { Menu } from '../../views';\nimport { Dropdown, Option } from '../../modules';\nimport Transition from 'react-motion-ui-pack';\nimport classNames from 'classnames';\nimport ListensToClickOutside from 'react-onclickoutside/decorator';\n\n/**\n * A dropdown component intended to behave exactly as the\n * HTML select component.\n */\nclass Select extends React.Component {\n    static propTypes = {\n        active: React.PropTypes.bool,\n        children: React.PropTypes.node,\n        className: React.PropTypes.node,\n        defaultClasses: React.PropTypes.bool,\n        enterAnimation: React.PropTypes.object,\n        fluid: React.PropTypes.bool,\n        glyphWidth: React.PropTypes.number,\n        ignoreCase: React.PropTypes.bool,\n        leaveAnimation: React.PropTypes.object,\n        multiple: React.PropTypes.bool,\n        name: React.PropTypes.string,\n        noResults: React.PropTypes.string,\n        placeholder: React.PropTypes.string,\n        search: React.PropTypes.bool\n    };\n\n    static defaultProps = {\n        ignoreCase: true,\n        defaultClasses: true,\n        glyphWidth: 1.0714,\n        noResults: 'No results found...',\n        enterAnimation: {\n            height: 'auto'\n        },\n        leaveAnimation: {\n            height: 0\n        }\n    };\n\n    constructor(props) {\n        super(props);\n\n        // we don't want this modifying state\n        this.validOptions = {}\n\n        this.state = {\n            active: false,\n            error: false,\n            selected: props.multiple ? [] : null,\n            visible: false\n        }\n    }\n\n    componentWillMount() {\n        // adds all child values to the validOptions array\n        React.Children.forEach(this.props.children, child => {\n            this.validOptions[child.props.children] = child.props.value;\n        });\n    }\n\n    shouldComponentUpdate(props, state) {\n        // prevents duplicate states from rerendering. happens frequently with\n        // this many onclick handlers, and the only expected prop change that\n        // would warrant a re-render is the child length\n        if (this.state === state) {\n            // children remain the same.\n            if (props.children.length === this.props.children.length) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n\n        return true;\n    }\n\n\n    onClick(e) {\n        // clicking the arrow/search box or dropdown area\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n\n        this.setFocus();\n\n        if (!this.state.active) {\n            this.setState({\n                active: true,\n                visible: true\n            });\n        }\n    }\n\n    onCloseOption(name, e) {\n        // pressing the x on a multiple select\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n\n        let selected = this.getSelected(name)\n\n        if (this.refs.search) {\n            this.refs.search.value = '';\n        }\n\n        this.setState({\n            selected: selected\n        });\n    }\n\n    onLabelClick(name, e) {\n        // clicking the label of a multiple select\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n    }\n\n    onOptionClick(name, e) {\n        // click an option\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n\n        let selected = this.getSelected(name)\n\n        if (this.refs.search) {\n            this.refs.search.value = '';\n        }\n\n        // if it's multiple, don't close it just set the state and refocus the element\n        if (this.props.multiple) {\n            this.setState({\n                selected: selected\n            });\n\n            this.setFocus();\n        } else {\n            this.setState({\n                active: false,\n                selected: selected\n            });\n        }\n    }\n\n    onSearchKeyDown(e) {\n        // pressing the enter key when a multiple select\n        if (e.which === 13 && this.props.multiple) {\n            let match = this.isMatch();\n\n            // target matches a valid select\n            if (match) {\n                if (this.props.multiple) {\n                    this.refs.search.value = '';\n                }\n\n                this.setState({\n                    error: false,\n                    selected: this.getSelected(match)\n                });\n            } else {\n                // not match, error\n                this.setState({\n                    error: true\n                });\n            }\n\n            // pressing delete when there is an empty search box using a multiple select\n        } else if (e.which === 8 && this.refs.search.value == '' && this.props.multiple) {\n            let selected = this.popSelected();\n\n            if (selected) {\n                this.setState({\n                    selected: selected\n                })\n            }\n        }\n    }\n\n    onSearchChange() {\n        // anytime we modify the text box, remove the error\n        this.setState({\n            error: false\n        });\n    }\n\n\n    renderChildren() {\n        let search = this.refs.search ? this.refs.search.value : null;\n        let flags = this.props.ignoreCase ? 'gi' : 'g';\n        let newChildren = [];\n\n        // we can't map children because we need to know when length is zero\n        React.Children.forEach(this.props.children, child => {\n            if (child.type === Option) {\n                let match = true;\n                let selected = false;\n\n                // search box handling\n                if (search) {\n                    let regex = new RegExp(search, flags);\n\n                    if (!regex.test(child.props.children)) {\n                        match = false;\n                    }\n                }\n\n                // check if this child is in the selection array\n                if (this.props.multiple) {\n                    // is this value in the selected array of a multiple select\n                    if (this.state.selected.indexOf(child.props.children) > -1) {\n                        selected = true;\n                    }\n                }\n\n                if (match && !selected) {\n                    newChildren.push(\n                        React.cloneElement(\n                            child,\n                            {\n                                key: child.props.children,\n                                active: this.state.selected == child.props.children && !this.props.search,\n                                onClick: this.onOptionClick.bind(this, child.props.children)\n                            },\n                            child.props.children\n                        )\n                    );\n                }\n\n            }\n        });\n\n        return newChildren;\n    }\n\n    renderLabels() {\n        // can't animate while ReactTransitionGroup\n        if (this.props.multiple) {\n            return this.state.selected.map(label => {\n/*                return (\n                    <Label\n                        component=\"a\"\n                        key={label}\n                        onClick={this.onLabelClick.bind(this, label)}\n                        style={{ display: 'inline-block' }}\n                    >\n                        {label}\n                        <Icon\n                            name=\"close\"\n                            onClick={this.onCloseOption.bind(this, label)}/>\n                    </Label>\n                );*/\n                return (\n                    <Transition\n                        component={false}\n                        enter={{ scale: 1, opacity: 1 }}\n                        leave={{ scale: 0, opacity: 0 }}\n                        style={{ display: 'inline-block' }}\n                    >\n                        <Label\n                            component=\"a\"\n                            key={label}\n                            onClick={this.onLabelClick.bind(this, label)}\n                            style={{ display: 'inline-block' }}\n                        >\n                            {label}\n                            <Icon\n                                name=\"close\"\n                                onClick={this.onCloseOption.bind(this, label)}/>\n                        </Label>\n                    </Transition>\n                )\n            });\n        }\n    }\n\n    renderSearch() {\n        let style = {};\n\n        // expand the width of the search box as you type. no max?\n        let width = this.refs.search ? this.refs.search.value.length * this.props.glyphWidth : null;\n\n\n        if (width) {\n            style.width = width + 'em';\n        }\n\n        return this.props.search ?\n            <input\n                className=\"search\"\n                onChange={this.onSearchChange.bind(this)}\n                onKeyDown={this.onSearchKeyDown.bind(this)}\n                ref=\"search\"\n                style={style}\n                tabIndex=\"0\"/> : false;\n    }\n\n    renderText() {\n        return (\n            <div className={classNames(this.getTextClasses())}>\n                {this.state.selected && !this.props.multiple ? this.state.selected : this.props.placeholder}\n            </div>\n        );\n    }\n\n    render() {\n        /* eslint-disable no-use-before-define */\n        let {\n            active, multiple, search, ignoreCase, name, placeholder,\n            glyphWidth, defaultClasses, noResults, ...other\n        } = this.props;\n        /* eslint-enable no-use-before-define */\n\n        other.className = classNames(this.props.className, this.getClasses());\n        other.onClick = this.onClick.bind(this);\n\n        let children = this.renderChildren();\n\n        if (React.Children.count(children) == 0) {\n            children = (\n                <div\n                    className=\"message\"\n                >\n                    {this.props.noResults}\n                </div>\n            );\n        }\n\n        return (\n            <Dropdown\n                {...other}\n                active={this.state.active}\n                visible={this.state.visible}\n            >\n                <input\n                    name={this.props.name}\n                    type=\"hidden\"\n                    value={this.formatValue()}/>\n                <Icon\n                    name=\"dropdown\"/>\n                {this.renderLabels()}\n                {this.renderSearch()}\n                {this.renderText()}\n                <Transition\n                    component={false}\n                    enter={this.props.enterAnimation}\n                    leave={this.props.leaveAnimation}\n                >\n                    {this.state.active &&\n                        <Menu key=\"menu\"\n                              style={{ overflow: 'hidden' }}\n                        >\n                            {children}\n                        </Menu>\n                    }\n                </Transition>\n            </Dropdown>\n        );\n    }\n\n    handleClickOutside() {\n        // this should be doing the same thing as the enter key before it closes\n\n        let match = this.isMatch();\n\n        // the text box itself is a match\n        if (match) {\n            if (this.props.multiple) {\n                this.refs.search.value = '';\n            }\n\n            this.setState({\n                active: false,\n                error: false,\n                selected: this.getSelected(match)\n            });\n            // if the search value is non-empty and the state is active but there's no valid selection, it's an error\n        } else if (this.refs.search && this.refs.search.value && this.state.active && !this.state.error && this.state.selected.length == 0) {\n            this.setState({\n                error: true\n            });\n            // if the state is active and there is no error we can close it\n        } else if (this.state.active && !this.state.error) {\n            this.setState({\n                active: false\n            });\n        }\n    }\n\n    // value formating for the hidden input box\n    formatValue() {\n        if (this.props.multiple) {\n            let selected = [];\n\n            // maybe just string and slice it instead of allocating an array\n            this.state.selected.forEach(item => {\n                selected.push(this.validOptions[item]);\n            });\n\n            return selected.join(', ');\n        } else {\n            return this.validOptions[this.state.selected];\n        }\n    }\n\n    getTextClasses() {\n        return {\n            default: !this.state.selected || this.props.multiple,\n            filtered: this.refs.search && this.refs.search.value.length > 0,\n            text: true\n        }\n    }\n\n    getClasses() {\n        return {\n            // default\n            active: this.props.active,\n            // positioning\n\n            // types\n            selection: true,\n            search: this.props.search,\n            fluid: this.props.fluid,\n\n            // state\n            error: this.state.error,\n\n            // component\n            multiple: this.props.multiple\n\n            // variations\n        };\n    }\n\n    getSelected(name) {\n        let clone = name;\n\n        if (this.props.multiple) {\n            let index = this.state.selected.indexOf(name);\n            clone = this.state.selected.slice(0);\n\n            if (index > -1) {\n                clone.splice(index, 1);\n            } else {\n                clone.push(name);\n            }\n        }\n\n        return clone;\n    }\n\n    isMatch() {\n        let match = false;\n        if (this.refs.search) {\n            let target = this.props.ignoreCase ? this.refs.search.value.toLowerCase() : this.refs.search.value;\n\n            for (let name in this.validOptions) {\n                let text = this.props.ignoreCase ? name.toLowerCase() : name;\n\n                if (text == target) {\n                    match = name;\n                    break;\n                }\n            }\n        }\n\n        return match;\n    }\n\n    popSelected() {\n        let clone = this.state.selected.splice(0);\n\n        if (clone.length == 0 || !this.props.multiple) {\n            return false;\n        } else {\n            clone.pop();\n            return clone;\n        }\n    }\n\n    setFocus() {\n        if (this.props.search) {\n            ReactDOM.findDOMNode(this.refs.search).focus();\n        }\n    }\n}\n\n// Need this trick for react-docgen\nSelect = ListensToClickOutside(Select);\nexport { Select };\n"]}