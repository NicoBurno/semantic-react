{"version":3,"sources":["../../../src/components/modules/dropdown/dropdownmenu.jsx"],"names":[],"mappings":"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","file":"dropdownmenu.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Transition from 'react-motion-ui-pack';\r\nimport EventListener from 'react-event-listener';\r\nimport classNames from 'classnames';\r\nimport { validateClassProps, isNodeInRoot } from '../../utilities';\r\nimport { Icon, Text } from '../../elements';\r\nimport { Menu } from '../../views';\r\nimport DropdownElement from './dropdownelement';\r\nimport elementType from 'react-prop-types/lib/elementType'; \r\n\r\n\r\n/**\r\n * Dropdown menu with animations\r\n */\r\nexport default class DropdownMenu extends React.Component {\r\n    static propTypes = {\r\n        ...DropdownElement.propTypes,\r\n        /**\r\n         * Active/Close menu\r\n         */\r\n        active: React.PropTypes.bool,\r\n        /**\r\n         * Enter animations transforms\r\n         */\r\n        enterAnimation: React.PropTypes.object,\r\n        /**\r\n         * Menu icon\r\n         */\r\n        icon: React.PropTypes.string,\r\n        /**\r\n         * Menu label\r\n         */\r\n        label: React.PropTypes.string,\r\n        /**\r\n         * Leave animation\r\n         */\r\n        leaveAnimation: React.PropTypes.object,\r\n        /**\r\n         * Specify component to be used as Menu.\r\n         * Usually is should be menu but with custom options applied (for example inverted). \r\n         * DropdownMenu will pass some props to your Menu component, so you're responsive for passing it down to the level\r\n         */\r\n        menuComponent: elementType,\r\n        /**\r\n         * Menu active value\r\n         */\r\n        menuValue: React.PropTypes.oneOfType([\r\n            React.PropTypes.number,\r\n            React.PropTypes.string,\r\n            React.PropTypes.arrayOf(React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]))\r\n        ]),\r\n        /**\r\n         * Callback for active item change. Will not be fired if menuValue was omitted\r\n         * Will pass new menuValue or array of new menuValue\r\n         * If all items were unselected would pass null if menuValue is single value or empty array if menuValue is array\r\n         */\r\n        onMenuChange: React.PropTypes.func,\r\n        /**\r\n         * Callback for menu item click\r\n         */\r\n        onMenuItemClick: React.PropTypes.func,\r\n        /**\r\n         * Callback will be called when menu wants to be closed (for ex. from outside click)\r\n         */\r\n        onRequestClose: React.PropTypes.func\r\n    };\r\n\r\n    static defaultProps = {\r\n        ...DropdownElement.defaultProps,\r\n        active: false,\r\n        icon: 'dropdown',\r\n        enterAnimation: {\r\n            height: 'auto'\r\n        },\r\n        leaveAnimation: {\r\n            height: 0\r\n        },\r\n        onMenuItemClick: () => {},\r\n        onMenuChange: () => {},\r\n        onRequestClose: () => {}\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /**\r\n         * Menu reference\r\n         */\r\n        this.menuRef = null;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Outside dropdown click\r\n     * @param {React.MouseEvent} e\r\n     */\r\n    onOutsideDropdownClick = (e) => {\r\n        const { active, onRequestClose } = this.props;\r\n        if (!active) {\r\n            return;\r\n        }\r\n        const dropdownElement = ReactDOM.findDOMNode(this);\r\n        if (dropdownElement) {\r\n            if (!isNodeInRoot(e.target, dropdownElement)) {\r\n                onRequestClose();\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Renders dropdown icon\r\n     * @returns {*}\r\n     */\r\n    renderMenuIcon() {\r\n        if (typeof this.props.component === 'function') {\r\n            return null;\r\n        } else {\r\n            return <Icon name={this.props.icon}/>\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders dropdown text\r\n     * @returns {*}\r\n     */\r\n    renderMenuText() {\r\n        if (typeof this.props.component === 'function' || !this.props.label) {\r\n            return null;\r\n        } else {\r\n            return <Text>{this.props.label}</Text>\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render\r\n     * @returns {JSX.Element}\r\n     */\r\n    render() {\r\n        /* eslint-disable no-use-before-define */\r\n        let {\r\n            active, enterAnimation, leaveAnimation, children, icon, label, menuComponent, menuValue, \r\n            onMenuChange, onMenuItemClick, onRequestClose, ...other\r\n        } = this.props;\r\n        /* eslint-enable no-use-before-define */\r\n\r\n        const MenuComponent = menuComponent || Menu;\r\n\r\n\r\n        return (\r\n            <DropdownElement\r\n                {...other}\r\n                active={active}\r\n            >\r\n                {/* This will embed <noscript></noscript> inside dropdown div. Shouldn't cause any problems */}\r\n                <EventListener elementName=\"document\"\r\n                               onMouseDown={this.onOutsideDropdownClick}\r\n                               onTouchStart={this.onOutsideDropdownClick}/>\r\n                {this.renderMenuText()}\r\n                {this.renderMenuIcon()}\r\n                <Transition\r\n                    component={false}\r\n                    enter={enterAnimation}\r\n                    leave={leaveAnimation}\r\n                >\r\n                    {active &&\r\n                    <MenuComponent key=\"menu\"\r\n                                   menuValue={menuValue}\r\n                                   onMenuItemClick={onMenuItemClick}\r\n                                   onMenuChange={onMenuChange}\r\n                                   ref={ref => this.menuRef = ref}\r\n                                   style={{ overflow: 'hidden' }}\r\n                    >\r\n                        {children}\r\n                    </MenuComponent>\r\n                    }\r\n                </Transition>\r\n            </DropdownElement>\r\n        );\r\n    }\r\n}\r\n\r\n"]}