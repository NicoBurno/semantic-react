{"version":3,"sources":["../../../src/components/modules/dropdown/dropdownmenu.jsx"],"names":[],"mappings":"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","file":"dropdownmenu.js","sourcesContent":["import React from 'react';\r\nimport { Dropdown } from '../../modules';\r\nimport Transition from 'react-motion-ui-pack';\r\nimport { Icon, Text } from '../../elements';\r\nimport { Menu } from '../../views';\r\nimport ListensToClickOutside from 'react-onclickoutside/decorator';\r\n\r\n\r\n/**\r\n * Dropdown menu with animations\r\n */\r\n@ListensToClickOutside\r\nexport default class DropdownMenu extends React.Component {\r\n    static propTypes = {\r\n        /**\r\n         * Should menu be opened when first rendered\r\n         */\r\n        active: React.PropTypes.bool,\r\n        /**\r\n         * Children nodes\r\n         */\r\n        children: React.PropTypes.node,\r\n        /**\r\n         * Pass additional component to use in dropdown, for example Button.\r\n         * If you specify it, then default icon and label won't be rendered\r\n         */\r\n        dropdownComponent: React.PropTypes.oneOfType([\r\n            React.PropTypes.element,\r\n            React.PropTypes.string,\r\n            React.PropTypes.func\r\n        ]),\r\n        /**\r\n         * Enter animations transforms\r\n         */\r\n        enterAnimation: React.PropTypes.object,\r\n        /**\r\n         * Menu icon\r\n         */\r\n        icon: React.PropTypes.string,\r\n        /**\r\n         * Menu label\r\n         */\r\n        label: React.PropTypes.string,\r\n        /**\r\n         * Leave animation\r\n         */\r\n        leaveAnimation: React.PropTypes.object,\r\n        /**\r\n         * Specify component to be used as Menu.\r\n         * Usually is should be menu but with custom options applied (for example inverted)\r\n         */\r\n        menuComponent: React.PropTypes.oneOfType([\r\n            React.PropTypes.element,\r\n            React.PropTypes.string,\r\n            React.PropTypes.func\r\n        ])\r\n    };\r\n\r\n    static defaultProps = {\r\n        active: false,\r\n        icon: 'dropdown',\r\n        dropdownComponent: 'div',\r\n        enterAnimation: {\r\n            height: 'auto'\r\n        },\r\n        leaveAnimation: {\r\n            height: 0\r\n        }\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            active: props.active,\r\n            visible: false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Menu animation completed\r\n     */\r\n    onAnimationComplete() {\r\n        // visible state differs from active in that it\r\n        // cna only change after completion of the animation\r\n        if (!this.state.active) {\r\n            this.setState({\r\n                visible: false\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dropdown click\r\n     * @param e\r\n     */\r\n    onClick(e) {\r\n        // clicking the arrow/search box or dropdown area\r\n        e.stopPropagation();\r\n        e.nativeEvent.stopImmediatePropagation();\r\n\r\n        if (!this.state.active) {\r\n            this.setState({\r\n                active: true,\r\n                visible: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Menu item click\r\n     * @param e\r\n     */\r\n    onMenuItemClick(e) {\r\n        // click an option\r\n        e.stopPropagation();\r\n        e.nativeEvent.stopImmediatePropagation();\r\n\r\n        this.setState({\r\n            active: false\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Renders dropdown icon\r\n     * @returns {*}\r\n     */\r\n    renderMenuIcon() {\r\n        if (this.props.dropdownComponent !== 'div') {\r\n            return null;\r\n        } else {\r\n            return <Icon name={this.props.icon}/>\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders dropdown text\r\n     * @returns {*}\r\n     */\r\n    renderMenuText() {\r\n        if (this.props.dropdownComponent !== 'div' || !this.props.label) {\r\n            return null;\r\n        } else {\r\n            return <Text>{this.props.label}</Text>\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders children items\r\n     * @returns {Array}\r\n     */\r\n    renderChildren() {\r\n        let newChildren = [];\r\n\r\n        React.Children.forEach(this.props.children, child => {\r\n            newChildren.push(\r\n                React.cloneElement(\r\n                    child,\r\n                    {\r\n                        key: child.props.children,\r\n                        onClick: this.onMenuItemClick.bind(this)\r\n                    },\r\n                    child.props.children\r\n                )\r\n            );\r\n        });\r\n\r\n        return newChildren;\r\n    }\r\n\r\n    /**\r\n     * Render\r\n     * @returns {XML}\r\n     */\r\n    render() {\r\n        /* eslint-disable no-use-before-define */\r\n        let {\r\n            active, icon, label, dropdownComponent, menuComponent, ...other\r\n        } = this.props;\r\n        /* eslint-enable no-use-before-define */\r\n\r\n        // other.className = classNames(this.props.className, this.getClasses());\r\n        other.onClick = this.onClick.bind(this);\r\n\r\n        const MenuComponent = menuComponent || Menu;\r\n\r\n        let children = this.renderChildren();\r\n\r\n        return (\r\n            <Dropdown\r\n                {...other}\r\n                active={this.state.active}\r\n                component={dropdownComponent}\r\n                visible={this.state.visible}\r\n            >\r\n                {this.renderMenuText()}\r\n                {this.renderMenuIcon()}\r\n                <Transition\r\n                    component={false}\r\n                    enter={this.props.enterAnimation}\r\n                    leave={this.props.leaveAnimation}\r\n                >\r\n                    {this.state.active &&\r\n                    <MenuComponent key=\"menu\"\r\n                                   style={{ overflow: 'hidden' }}\r\n                    >\r\n                        {children}\r\n                    </MenuComponent>\r\n                    }\r\n                </Transition>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Outside click handler\r\n     */\r\n    handleClickOutside() {\r\n        if (this.state.active) {\r\n            this.setState({\r\n                active: false\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n"]}