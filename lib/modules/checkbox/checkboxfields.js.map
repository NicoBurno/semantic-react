{"version":3,"sources":["../../../src/components/modules/checkbox/checkboxfields.jsx"],"names":[],"mappings":"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","file":"checkboxfields.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Checkbox } from '../../modules';\r\nimport classNames from 'classnames';\r\n\r\nexport default class CheckboxFields extends Component {\r\n    static propTypes = {\r\n        children: React.PropTypes.oneOfType([\r\n            React.PropTypes.array,\r\n            React.PropTypes.node\r\n        ]),\r\n        className: React.PropTypes.node,\r\n        component: React.PropTypes.oneOfType([\r\n            React.PropTypes.element,\r\n            React.PropTypes.string\r\n        ]),\r\n        defaultClasses: React.PropTypes.bool,\r\n        disabled: React.PropTypes.bool,\r\n        name: React.PropTypes.string.isRequired,\r\n        onClick: React.PropTypes.func,\r\n        radio: React.PropTypes.bool,\r\n        readOnly: React.PropTypes.bool,\r\n        type: React.PropTypes.oneOf([\r\n            'grouped',\r\n            'inline'\r\n        ]).isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        component: 'div',\r\n        defaultClasses: true\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let active = this.props.radio ? -1 : [];\r\n\r\n        this.state = {\r\n            active: active\r\n        };\r\n    }\r\n\r\n    onClick(key)  {\r\n        // don't remove radio buttons if you click them twice\r\n        if (key === this.state.active && this.props.radio) {\r\n            return;\r\n        // but do remove for everything else\r\n        } else {\r\n            this.setActive(key);\r\n        }\r\n    }\r\n\r\n    renderChildren() {\r\n        let index = 0;\r\n        let element = null;\r\n\r\n        if (React.Children.count(this.props.children) === 1) {\r\n            return this.cloneChild(index,\r\n                React.Children.only(this.props.children)\r\n            );\r\n        } else {\r\n            return React.Children.map(this.props.children, child => {\r\n                if (child.type == Checkbox) {\r\n                    element = this.cloneChild(index, child);\r\n\r\n                    element = React.DOM.div({\r\n                        key: index,\r\n                        className: 'field'\r\n                    }, element);\r\n\r\n                    index++;\r\n                } else if (typeof child === 'string') {\r\n                    return (\r\n                        <label htmlFor={this.props.name}>{child}</label>\r\n                    );\r\n                } else {\r\n                    element = child;\r\n                }\r\n\r\n                return element;\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        /* eslint-disable no-use-before-define */\r\n        let { component, defaultClasses, name, ...other } = this.props;\r\n        /* eslint-enable no-use-before-define */\r\n        other.className = classNames(this.props.className, this.getClasses());\r\n\r\n        return React.createElement(\r\n            this.props.component,\r\n            other,\r\n            this.renderChildren()\r\n        );\r\n    }\r\n\r\n    // clone a chid and update the props\r\n    cloneChild(index, child) {\r\n        let boundClick = this.onClick.bind(this, index);\r\n\r\n        /* eslint-disable no-use-before-define */\r\n        let { children, component, defaultClasses, onClick, type,\r\n              ...other } = this.props;\r\n        /* eslint-enable no-use-before-define */\r\n\r\n        return React.cloneElement(child, {\r\n            key: index,\r\n            checked: this.getActive(index),\r\n            onClick: boundClick,\r\n            radio: this.props.radio,\r\n            readOnly: this.props.readOnly || this.props.disabled,\r\n            ...other\r\n        });\r\n    }\r\n\r\n    getClasses() {\r\n        let classes = {\r\n            // default\r\n\r\n            // positioning\r\n\r\n            // types\r\n\r\n            // component\r\n\r\n            // variations\r\n            fields: React.Children.count(this.props.children) > 1\r\n        };\r\n\r\n        classes[this.props.type] = !!this.props.type;\r\n\r\n        return classes;\r\n    }\r\n\r\n    getActive(index) {\r\n        let state = this.state.active;\r\n        let active = false;\r\n\r\n        if (Array.isArray(state)) {\r\n            active = state.indexOf(index) > -1 ? true : false;\r\n        } else {\r\n            active = state == index ? true : false;\r\n        }\r\n\r\n        return active;\r\n    }\r\n\r\n    setActive(index) {\r\n        if (this.props.readOnly || this.props.disabled) return;\r\n\r\n        let state = this.state.active;\r\n\r\n        // should only be an array if it's checkbox, not radio\r\n        // IE 9+ for indexOf\r\n        if (Array.isArray(state)) {\r\n            let position = state.indexOf(index);\r\n\r\n            if (position > -1) {\r\n                state.splice(position, 1);\r\n            } else {\r\n                state.push(index);\r\n            }\r\n\r\n        // it's a radio\r\n        } else {\r\n            state = index;\r\n        }\r\n\r\n        this.setState({\r\n            active: state\r\n        });\r\n    }\r\n}\r\n"]}