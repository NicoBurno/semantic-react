{"version":3,"sources":["../../../src/components/modules/popup/popup.jsx"],"names":[],"mappings":"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","file":"popup.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Transition from 'react-motion-ui-pack';\r\nimport Portal from 'react-portal';\r\nimport EventListener from 'react-event-listener';\r\nimport throttle from 'lodash.throttle';\r\nimport shallowCompare from 'react-addons-shallow-compare';\r\nimport { PopupElement, POSITIONS } from './popupelement';\r\nimport { isNodeInRoot } from '../../utilities';\r\n\r\n// const shallowCompare = require('react-addons-shallow-compare');\r\n\r\n/**\r\n * Popup with animations\r\n */\r\nexport class Popup extends React.Component {\r\n    static propTypes = {\r\n        ...PopupElement.propTypes,\r\n        /**\r\n         * True to display the popup. If false will be hidden\r\n         */\r\n        active: React.PropTypes.bool,\r\n        /**\r\n         * Auto position popup when needed\r\n         */\r\n        autoPosition: React.PropTypes.bool,\r\n        /**\r\n         * Offset for distance of popup from element\r\n         */\r\n        distanceAway: React.PropTypes.number,\r\n        /**\r\n         * End animation\r\n         */\r\n        endAnimation: React.PropTypes.object,\r\n        /**\r\n         * Use this position when element fails to fit on screen in all tried positions\r\n         * If omitted, the last tried position will be used instead\r\n         */\r\n        lastResortPosition: React.PropTypes.string,\r\n        /**\r\n         * Offset in pixels from calculated position\r\n         */\r\n        offset: React.PropTypes.number,\r\n        /**\r\n         * Callback when popup wants to be closed (i.e. when offscreen or clicked outside)\r\n         */\r\n        onRequestClose: React.PropTypes.func,\r\n        /**\r\n         * When auto-positioning popup use opposite direction or adjacent as next position\r\n         */\r\n        prefer: React.PropTypes.oneOf(['adjacent', 'opposite']),\r\n        /**\r\n         * If true will prevent clicking on the other elements\r\n         */\r\n        preventElementClicks: React.PropTypes.bool,\r\n        /**\r\n         * Hide popup when target element scrolls off the screen\r\n         */\r\n        requestCloseWhenOffScreen: React.PropTypes.bool,\r\n        /**\r\n         * Start animation\r\n         */\r\n        startAnimation: React.PropTypes.object,\r\n        /**\r\n         * Target element to apply popup\r\n         */\r\n        target: React.PropTypes.object\r\n    };\r\n\r\n    static defaultProps = {\r\n        ...PopupElement.defaultProps,\r\n        requestCloseWhenOffScreen: true,\r\n        autoPosition: true,\r\n        active: false,\r\n        distanceAway: 0,\r\n        offset: 0,\r\n        startAnimation: {\r\n            scale: 1\r\n        },\r\n        endAnimation: {\r\n            scale: 0\r\n        },\r\n        onRequestClose: () => {},\r\n        preventElementClicks: true,\r\n        prefer: 'adjacent'\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Handle resize / scrolls handler\r\n        this.handleResize = throttle(this.setPlacement.bind(this), 100);\r\n        this.handleScroll = throttle(this.setPlacement.bind(this, true), 100);\r\n\r\n        /**\r\n         * Array of current tried positions\r\n         * @type {Array}\r\n         */\r\n        this.positionsTried = [];\r\n        \r\n        this.state = {\r\n            active: this.props.active,\r\n            closing: false,\r\n            // Need to save position to state, since it could be changed by autoPosition\r\n            position: props.position, // eslint-disable-line\r\n            positionStyleTop: '0px',\r\n            positionStyleLeft: '0px'\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        if (this.props.active) {\r\n            // Set initial position for popup\r\n            this.setPlacement();\r\n        }\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.active !== this.state.active) {\r\n            if (nextProps.active) {\r\n                // Display popup, set active state\r\n                this.setState({\r\n                    active: true,\r\n                    position: nextProps.position\r\n                });\r\n            } else {\r\n                // need to wait to play animation and keep portal active\r\n                this.positionsTried = [];\r\n                this.setState({\r\n                    closing: true\r\n                });\r\n                setTimeout(() => {\r\n                    // Hide popup\r\n                    this.setState({\r\n                        active: false,\r\n                        closing: false\r\n                    });\r\n                }, 500);\r\n            }\r\n        }\r\n    }\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // since we're changing state immediately after componentDidUpdate we need to prevent re-rendering loop\r\n        return shallowCompare(this, nextProps, nextState);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Set popup position after update\r\n        this.setPlacement();\r\n    }\r\n    \r\n    onOutsideClick(event) {\r\n        if (!this.state.active || this.state.closing) {\r\n            return;\r\n        }\r\n        if (!this.refs.popup || !this.refs.popup.refs.popup) {\r\n            return;\r\n        }\r\n        if (isNodeInRoot(event.target, this.refs.popup.refs.popup)) {\r\n            return;\r\n        }\r\n        event.stopPropagation();\r\n        this.props.onRequestClose(event);\r\n    }\r\n\r\n    render() {\r\n        // consuming position from props here since it's passing it from state\r\n        /* eslint-disable no-use-before-define, react/prop-types */\r\n        let { active, autoPosition, distanceAway, lastResortPosition, offset, startAnimation, endAnimation,\r\n            onRequestClose, prefer, position, preventElementClicks, requestCloseWhenOffScreen, target, style, ...other } = this.props;\r\n        /* eslint-enable no-use-before-define, react/prop-types */\r\n        \r\n        // Apply invisible layer to portal if preventElementClicks is true\r\n        const portalStyle = {\r\n            position: 'fixed',\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0\r\n        };\r\n        \r\n        // Create style for popup\r\n        const positionStyle = {\r\n            left: this.state.positionStyleLeft,\r\n            top: this.state.positionStyleTop,\r\n            bottom: 'auto',\r\n            right: 'auto',\r\n            display: 'block',\r\n            position: 'fixed' // need it to be fixed to avoid it with bloating code with many checks\r\n        };\r\n        \r\n        const popupStyle = style ? [style, positionStyle] : positionStyle;\r\n        \r\n        return (\r\n            <Portal isOpened={this.state.active || (!this.state.active && this.state.closing)}\r\n                    style={this.props.preventElementClicks ? portalStyle : {}}\r\n            >\r\n                <noscript>\r\n                    <EventListener elementName=\"document\"\r\n                                   onMouseDown={this.onOutsideClick.bind(this)}\r\n                                   onTouchStart={this.onOutsideClick.bind(this)}/>\r\n                    <EventListener elementName=\"window\"\r\n                                   onResize={this.handleResize}\r\n                                   onScroll={this.handleScroll}/>\r\n                    <Transition\r\n                        component={false}\r\n                        enter={startAnimation}\r\n                        leave={endAnimation}\r\n                    >\r\n                        {(this.state.active && !this.state.closing) &&\r\n                        <PopupElement\r\n                            {...other}\r\n                            key=\"popup\"\r\n                            position={this.state.position}\r\n                            style={popupStyle}\r\n                            ref=\"popup\" />\r\n                        }\r\n                    </Transition>\r\n                </noscript>\r\n            </Portal>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Return target element boundaries\r\n     * @param element {HTMLElement}\r\n     */\r\n    getTargetPosition(element) {\r\n        const rect = element.getBoundingClientRect();\r\n        let left = rect.left;\r\n        let top = rect.top;\r\n\r\n        return {\r\n            top: top,\r\n            left: left,\r\n            right: left + element.offsetWidth,\r\n            bottom: top + element.offsetHeight,\r\n            width: element.offsetWidth,\r\n            height: element.offsetHeight,\r\n            center: left + element.offsetWidth / 2,\r\n            middle: top + element.offsetHeight / 2\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Return popup element boundaries\r\n     * @param element {HTMLElement}\r\n     */\r\n    getPopupDimensions(element) {\r\n        return {\r\n            width: element.offsetWidth,\r\n            height: element.offsetHeight,\r\n            center: element.offsetWidth / 2,\r\n            middle: element.offsetHeight / 2\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set popup position\r\n     */\r\n    setPlacement(scrolling = false) {\r\n        if (!this.state.active || this.state.closing) {\r\n            return;\r\n        }\r\n        if (!this.refs.popup || !this.refs.popup.refs || !this.refs.popup.refs.popup) {\r\n            return;\r\n        }\r\n        let popupHTMLElement = this.refs.popup.refs.popup;\r\n\r\n        // If target wasn't provided, then assuming that popup used as child of element, we can obtain target then\r\n        let targetEl = this.props.target || ReactDOM.findDOMNode(this);\r\n        if (!targetEl) {\r\n            return;\r\n        }\r\n        \r\n        // mark current position as tried\r\n        this.positionsTried.push(this.state.position);\r\n\r\n        const targetElementPosition = this.getTargetPosition(targetEl);\r\n        const popupDimensions = this.getPopupDimensions(popupHTMLElement);\r\n        \r\n        if (scrolling && this.props.requestCloseWhenOffScreen) {\r\n            this.requestCloseWhenOffScreen(targetElementPosition);\r\n        }\r\n        \r\n        // need to know margins\r\n        const computedStyle = window.getComputedStyle(popupHTMLElement);\r\n        const margins = {\r\n            top: parseFloat(computedStyle.marginTop),\r\n            bottom: parseFloat(computedStyle.marginBottom),\r\n            left: parseFloat(computedStyle.marginLeft),\r\n            right: parseFloat(computedStyle.marginRight)\r\n        };\r\n        // assuming that all margins should be equal, using it because if popup will be autopositioned to opposite direction, then\r\n        // getComputedStyle will not return correct margin, since it could be not-rerendered yet\r\n        let margin = margins.bottom || margins.right || margins.left || margins.top || 0;\r\n        // calculate popup position\r\n        let finalPosition = this.calculatePopupPosition(this.state.position, targetElementPosition, popupDimensions, margin);\r\n        // Recalculate position if needed\r\n        let nextPosition = null;\r\n        if (this.props.autoPosition && this.positionsTried.length <= POSITIONS.length) {\r\n            nextPosition = this.autoPosition(finalPosition, popupDimensions);\r\n            if (nextPosition) {\r\n                finalPosition = this.calculatePopupPosition(nextPosition, targetElementPosition, popupDimensions, margin);\r\n            }\r\n        }\r\n        \r\n        this.setState({\r\n            position: nextPosition ? nextPosition : this.state.position, // eslint-disable-line\r\n            positionStyleTop: `${finalPosition.top}px`,\r\n            positionStyleLeft: `${finalPosition.left}px`\r\n        });\r\n        \r\n        // apply position to popup\r\n/*        popupHTMLElement.style.left = `${finalPosition.left}px`;\r\n        popupHTMLElement.style.top = `${finalPosition.top}px`;\r\n        popupHTMLElement.style.bottom = 'auto';\r\n        popupHTMLElement.style.right = 'auto';\r\n        popupHTMLElement.style.display = 'block';*/\r\n        \r\n        \r\n    }\r\n\r\n    /**\r\n     * Attempt to auto-position popup\r\n     */\r\n    autoPosition(finalPosition, popupDimensions) {\r\n        if (finalPosition.top < 0 || finalPosition.top + popupDimensions.height > window.innerHeight \r\n            || finalPosition.left < 0 || finalPosition.left + popupDimensions.width > window.innerWidth) {\r\n            // obtain next position\r\n            let nextPosition = this.getNextPosition();\r\n            // if every position tried set to lastResortPosition if given\r\n            if (!nextPosition) {\r\n                // in case of prefer=opposite fill positionsTried array manually\r\n                this.positionsTried = [...POSITIONS];\r\n                if (this.props.lastResortPosition) {\r\n                    nextPosition = this.props.lastResortPosition;\r\n                } else {\r\n                    nextPosition = this.state.position;\r\n                }\r\n            }\r\n            return nextPosition;\r\n        } else {\r\n            // looks like we found a good position reset lastPositions list\r\n            this.positionsTried = [];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Return next popup position to try depending of current prefer style, or null if every position was tried\r\n     */\r\n    getNextPosition() {\r\n        if (this.positionsTried.length >= POSITIONS.length) {\r\n            return null;\r\n        }\r\n        let currentPositionIndex = POSITIONS.indexOf(this.state.position);\r\n        if (currentPositionIndex === -1) {\r\n            return null;\r\n        }\r\n        \r\n        switch (this.props.prefer) {\r\n            case 'adjacent':\r\n            default:\r\n                let nextPosition = null;\r\n                // We know now that at least one untried position should be available here\r\n                /* eslint-disable */\r\n                while (true) {\r\n                    // Reset index if we're off from array\r\n                    if (currentPositionIndex + 1 > POSITIONS.length) {\r\n                        currentPositionIndex = 0;\r\n                    }\r\n                    nextPosition = POSITIONS[currentPositionIndex];\r\n                    if (this.positionsTried.indexOf(nextPosition) === -1) {\r\n                        break;\r\n                    }\r\n                    currentPositionIndex++;\r\n                }\r\n                /* eslint-enable */\r\n                return nextPosition;\r\n            case 'opposite':\r\n                // just return opposite direction\r\n                switch (this.state.position) {\r\n                    case 'left center':\r\n                        return (this.positionsTried.indexOf('right center') === -1) ? 'right center' : null;\r\n                    case 'right center':\r\n                        return (this.positionsTried.indexOf('left center') === -1) ? 'left center' : null;\r\n                    case 'top left':\r\n                        return (this.positionsTried.indexOf('bottom left') === -1) ? 'bottom left' : null;\r\n                    case 'top center':\r\n                        return (this.positionsTried.indexOf('bottom center') === -1) ? 'bottom center' : null;\r\n                    case 'top right':\r\n                        return (this.positionsTried.indexOf('bottom right') === -1) ? 'bottom right' : null;\r\n                    case 'bottom left':\r\n                        return (this.positionsTried.indexOf('top left') === -1) ? 'top left' : null;\r\n                    case 'bottom center':\r\n                        return (this.positionsTried.indexOf('top center') === -1) ? 'top center' : null;\r\n                    case 'bottom right':\r\n                        return (this.positionsTried.indexOf('top right') === -1) ? 'top right' : null;\r\n                    default:\r\n                        return null;\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return true if element is off screen\r\n     * @param targetPosition\r\n     */\r\n    requestCloseWhenOffScreen(targetPosition) {\r\n        if (targetPosition.top < 0 || targetPosition.top > window.innerHeight\r\n        || targetPosition.left < 0 || targetPosition.left > window.innerWidth) {\r\n            this.props.onRequestClose();\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Return popup position by taking account of elements boundaries and current this.state.position\r\n     * @param position\r\n     * @param targetPosition\r\n     * @param popupDimensions\r\n     * @param margin {number}\r\n     */\r\n    calculatePopupPosition(position, targetPosition, popupDimensions, margin) {\r\n        let offset = this.props.offset;\r\n        let distanceAway = this.props.distanceAway;\r\n\r\n        switch (position) {\r\n            case 'top left':\r\n                return {\r\n                    left: targetPosition.left + offset,\r\n                    top: targetPosition.top - popupDimensions.height - margin - distanceAway\r\n                };\r\n            case 'top center':\r\n                return {\r\n                    left: targetPosition.center - popupDimensions.center + offset,\r\n                    top: targetPosition.top - popupDimensions.height - margin - distanceAway\r\n                };\r\n            case 'top right':\r\n                return {\r\n                    left: targetPosition.right - popupDimensions.width - offset,\r\n                    top: targetPosition.top - popupDimensions.height - margin - distanceAway\r\n                };\r\n            case 'left center':\r\n                return {\r\n                    left: targetPosition.left - popupDimensions.width - margin - distanceAway,\r\n                    top: targetPosition.middle - popupDimensions.middle + offset\r\n                };\r\n            case 'right center':\r\n                // not needed here to take margins into account\r\n                return {\r\n                    left: targetPosition.right + distanceAway,\r\n                    top: targetPosition.middle - popupDimensions.middle + offset\r\n                };\r\n            case 'bottom left':\r\n                return {\r\n                    left: targetPosition.left + offset,\r\n                    top: targetPosition.bottom + distanceAway\r\n                };\r\n            case 'bottom center':\r\n                return {\r\n                    left: targetPosition.center - popupDimensions.center + offset,\r\n                    top: targetPosition.bottom + distanceAway\r\n                };\r\n            case 'bottom right':\r\n                return {\r\n                    left: targetPosition.right - popupDimensions.width - offset,\r\n                    top: targetPosition.bottom + distanceAway\r\n                };\r\n        }\r\n    }\r\n\r\n}\r\n"]}