{"version":3,"sources":["../../../src/components/modules/popup/popup.jsx"],"names":[],"mappings":"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","file":"popup.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Transition from 'react-motion-ui-pack';\r\nimport Portal from 'react-portal';\r\nimport EventListener from 'react-event-listener';\r\nimport throttle from 'lodash.throttle';\r\nimport shallowCompare from 'react-addons-shallow-compare';\r\nimport PopupElement, { POSITIONS } from './popupelement';\r\nimport { isNodeInRoot } from '../../utilities';\r\n\r\n// const shallowCompare = require('react-addons-shallow-compare');\r\n\r\n/**\r\n * Popup with animations\r\n */\r\nexport default class Popup extends React.Component {\r\n    static propTypes = {\r\n        ...PopupElement.propTypes,\r\n        /**\r\n         * True to display the popup. If false will be hidden\r\n         */\r\n        active: React.PropTypes.bool,\r\n        /**\r\n         * Auto position popup when needed\r\n         */\r\n        autoPosition: React.PropTypes.bool,\r\n        /**\r\n         * Offset for distance of popup from element\r\n         */\r\n        distanceAway: React.PropTypes.number,\r\n        /**\r\n         * End animation\r\n         */\r\n        endAnimation: React.PropTypes.object,\r\n        /**\r\n         * Use this position when element fails to fit on screen in all tried positions\r\n         * If omitted, the last tried position will be used instead\r\n         */\r\n        lastResortPosition: React.PropTypes.string,\r\n        /**\r\n         * Offset in pixels from calculated position\r\n         */\r\n        offset: React.PropTypes.number,\r\n        /**\r\n         * Callback when popup wants to be closed (i.e. when offscreen or clicked outside)\r\n         */\r\n        onRequestClose: React.PropTypes.func,\r\n        /**\r\n         * When auto-positioning popup use opposite direction or adjacent as next position\r\n         */\r\n        prefer: React.PropTypes.oneOf(['adjacent', 'opposite']),\r\n        /**\r\n         * If true will prevent clicking on the other elements\r\n         */\r\n        preventElementClicks: React.PropTypes.bool,\r\n        /**\r\n         * Hide popup when target element scrolls off the screen\r\n         */\r\n        requestCloseWhenOffScreen: React.PropTypes.bool,\r\n        /**\r\n         * Start animation\r\n         */\r\n        startAnimation: React.PropTypes.object,\r\n        /**\r\n         * Target element to apply popup\r\n         */\r\n        target: React.PropTypes.object\r\n    };\r\n\r\n    static defaultProps = {\r\n        ...PopupElement.defaultProps,\r\n        requestCloseWhenOffScreen: true,\r\n        autoPosition: true,\r\n        active: false,\r\n        distanceAway: 0,\r\n        offset: 0,\r\n        startAnimation: {\r\n            scale: 1\r\n        },\r\n        endAnimation: {\r\n            scale: 0\r\n        },\r\n        onRequestClose: () => {},\r\n        preventElementClicks: true,\r\n        prefer: 'adjacent'\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Handle resize / scrolls handler\r\n        this.handleResize = throttle(this.setPlacement.bind(this), 100);\r\n        this.handleScroll = throttle(this.setPlacement.bind(this, true), 100);\r\n\r\n        /**\r\n         * Array of current tried positions\r\n         * @type {Array}\r\n         */\r\n        this.positionsTried = [];\r\n        \r\n        this.state = {\r\n            active: this.props.active,\r\n            closing: false,\r\n            // Need to save position to state, since it could be changed by autoPosition\r\n            position: props.position, // eslint-disable-line\r\n            positionStyleTop: '0px',\r\n            positionStyleLeft: '0px'\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        if (this.props.active) {\r\n            // Set initial position for popup\r\n            this.setPlacement();\r\n        }\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.active !== this.state.active) {\r\n            if (nextProps.active) {\r\n                // Display popup, set active state\r\n                this.setState({\r\n                    active: true,\r\n                    position: nextProps.position\r\n                });\r\n            } else {\r\n                // need to wait to play animation and keep portal active\r\n                this.positionsTried = [];\r\n                this.setState({\r\n                    closing: true\r\n                });\r\n                setTimeout(() => {\r\n                    // Hide popup\r\n                    this.setState({\r\n                        active: false,\r\n                        closing: false\r\n                    });\r\n                }, 500);\r\n            }\r\n        }\r\n    }\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // since we're changing state immediately after componentDidUpdate we need to prevent re-rendering loop\r\n        return shallowCompare(this, nextProps, nextState);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Set popup position after update\r\n        this.setPlacement();\r\n    }\r\n    \r\n    onOutsideClick(event) {\r\n        if (!this.state.active || this.state.closing) {\r\n            return;\r\n        }\r\n        if (!this.refs.popup || !this.refs.popup.refs.popup) {\r\n            return;\r\n        }\r\n        if (isNodeInRoot(event.target, this.refs.popup.refs.popup)) {\r\n            return;\r\n        }\r\n        event.stopPropagation();\r\n        this.props.onRequestClose(event);\r\n    }\r\n\r\n    render() {\r\n        // consuming position from props here since it's passing it from state\r\n        /* eslint-disable no-use-before-define, react/prop-types */\r\n        let { active, autoPosition, distanceAway, lastResortPosition, offset, startAnimation, endAnimation,\r\n            onRequestClose, prefer, position, preventElementClicks, requestCloseWhenOffScreen, target, style, ...other } = this.props;\r\n        /* eslint-enable no-use-before-define, react/prop-types */\r\n        \r\n        // Apply invisible layer to portal if preventElementClicks is true\r\n        const portalStyle = {\r\n            position: 'fixed',\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0\r\n        };\r\n        \r\n        // Create style for popup\r\n        const positionStyle = {\r\n            left: this.state.positionStyleLeft,\r\n            top: this.state.positionStyleTop,\r\n            bottom: 'auto',\r\n            right: 'auto',\r\n            display: 'block',\r\n            position: 'fixed' // need it to be fixed to avoid it with bloating code with many checks\r\n        };\r\n        \r\n        const popupStyle = style ? [style, positionStyle] : positionStyle;\r\n        \r\n        return (\r\n            <Portal isOpened={this.state.active || (!this.state.active && this.state.closing)}\r\n                    style={this.props.preventElementClicks ? portalStyle : {}}\r\n            >\r\n                <noscript>\r\n                    <EventListener elementName=\"document\"\r\n                                   onMouseDown={this.onOutsideClick.bind(this)}\r\n                                   onTouchStart={this.onOutsideClick.bind(this)}/>\r\n                    <EventListener elementName=\"window\"\r\n                                   onResize={this.handleResize}\r\n                                   onScroll={this.handleScroll}/>\r\n                    <Transition\r\n                        component={false}\r\n                        enter={startAnimation}\r\n                        leave={endAnimation}\r\n                    >\r\n                        {(this.state.active && !this.state.closing) &&\r\n                        <PopupElement\r\n                            {...other}\r\n                            key=\"popup\"\r\n                            position={this.state.position}\r\n                            style={popupStyle}\r\n                            ref=\"popup\" />\r\n                        }\r\n                    </Transition>\r\n                </noscript>\r\n            </Portal>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Return target element boundaries\r\n     * @param element {HTMLElement}\r\n     */\r\n    getTargetPosition(element) {\r\n        const rect = element.getBoundingClientRect();\r\n        let left = rect.left;\r\n        let top = rect.top;\r\n\r\n        return {\r\n            top: top,\r\n            left: left,\r\n            right: left + element.offsetWidth,\r\n            bottom: top + element.offsetHeight,\r\n            width: element.offsetWidth,\r\n            height: element.offsetHeight,\r\n            center: left + element.offsetWidth / 2,\r\n            middle: top + element.offsetHeight / 2\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Return popup element boundaries\r\n     * @param element {HTMLElement}\r\n     */\r\n    getPopupDimensions(element) {\r\n        return {\r\n            width: element.offsetWidth,\r\n            height: element.offsetHeight,\r\n            center: element.offsetWidth / 2,\r\n            middle: element.offsetHeight / 2\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set popup position\r\n     */\r\n    setPlacement(scrolling = false) {\r\n        if (!this.state.active || this.state.closing) {\r\n            return;\r\n        }\r\n        if (!this.refs.popup || !this.refs.popup.refs || !this.refs.popup.refs.popup) {\r\n            return;\r\n        }\r\n        let popupHTMLElement = this.refs.popup.refs.popup;\r\n\r\n        // If target wasn't provided, then assuming that popup used as child of element, we can obtain target then\r\n        let targetEl = this.props.target || ReactDOM.findDOMNode(this);\r\n        if (!targetEl) {\r\n            return;\r\n        }\r\n        \r\n        // mark current position as tried\r\n        this.positionsTried.push(this.state.position);\r\n\r\n        const targetElementPosition = this.getTargetPosition(targetEl);\r\n        const popupDimensions = this.getPopupDimensions(popupHTMLElement);\r\n        \r\n        if (scrolling && this.props.requestCloseWhenOffScreen) {\r\n            this.requestCloseWhenOffScreen(targetElementPosition);\r\n        }\r\n        \r\n        // need to know margins\r\n        const computedStyle = window.getComputedStyle(popupHTMLElement);\r\n        const margins = {\r\n            top: parseFloat(computedStyle.marginTop),\r\n            bottom: parseFloat(computedStyle.marginBottom),\r\n            left: parseFloat(computedStyle.marginLeft),\r\n            right: parseFloat(computedStyle.marginRight)\r\n        };\r\n        // assuming that all margins should be equal, using it because if popup will be autopositioned to opposite direction, then\r\n        // getComputedStyle will not return correct margin, since it could be not-rerendered yet\r\n        let margin = margins.bottom || margins.right || margins.left || margins.top || 0;\r\n        // calculate popup position\r\n        let finalPosition = this.calculatePopupPosition(this.state.position, targetElementPosition, popupDimensions, margin);\r\n        // Recalculate position if needed\r\n        let nextPosition = null;\r\n        if (this.props.autoPosition && this.positionsTried.length <= POSITIONS.length) {\r\n            nextPosition = this.autoPosition(finalPosition, popupDimensions);\r\n            if (nextPosition) {\r\n                finalPosition = this.calculatePopupPosition(nextPosition, targetElementPosition, popupDimensions, margin);\r\n            }\r\n        }\r\n        \r\n        this.setState({\r\n            position: nextPosition ? nextPosition : this.state.position, // eslint-disable-line\r\n            positionStyleTop: `${finalPosition.top}px`,\r\n            positionStyleLeft: `${finalPosition.left}px`\r\n        });\r\n        \r\n        // apply position to popup\r\n/*        popupHTMLElement.style.left = `${finalPosition.left}px`;\r\n        popupHTMLElement.style.top = `${finalPosition.top}px`;\r\n        popupHTMLElement.style.bottom = 'auto';\r\n        popupHTMLElement.style.right = 'auto';\r\n        popupHTMLElement.style.display = 'block';*/\r\n        \r\n        \r\n    }\r\n\r\n    /**\r\n     * Attempt to auto-position popup\r\n     */\r\n    autoPosition(finalPosition, popupDimensions) {\r\n        if (finalPosition.top < 0 || finalPosition.top + popupDimensions.height > window.innerHeight \r\n            || finalPosition.left < 0 || finalPosition.left + popupDimensions.width > window.innerWidth) {\r\n            // obtain next position\r\n            let nextPosition = this.getNextPosition();\r\n            // if every position tried set to lastResortPosition if given\r\n            if (!nextPosition) {\r\n                // in case of prefer=opposite fill positionsTried array manually\r\n                this.positionsTried = [...POSITIONS];\r\n                if (this.props.lastResortPosition) {\r\n                    nextPosition = this.props.lastResortPosition;\r\n                } else {\r\n                    nextPosition = this.state.position;\r\n                }\r\n            }\r\n            return nextPosition;\r\n        } else {\r\n            // looks like we found a good position reset lastPositions list\r\n            this.positionsTried = [];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Return next popup position to try depending of current prefer style, or null if every position was tried\r\n     */\r\n    getNextPosition() {\r\n        if (this.positionsTried.length >= POSITIONS.length) {\r\n            return null;\r\n        }\r\n        let currentPositionIndex = POSITIONS.indexOf(this.state.position);\r\n        if (currentPositionIndex === -1) {\r\n            return null;\r\n        }\r\n        \r\n        switch (this.props.prefer) {\r\n            case 'adjacent':\r\n            default:\r\n                let nextPosition = null;\r\n                // We know now that at least one untried position should be available here\r\n                /* eslint-disable */\r\n                while (true) {\r\n                    // Reset index if we're off from array\r\n                    if (currentPositionIndex + 1 > POSITIONS.length) {\r\n                        currentPositionIndex = 0;\r\n                    }\r\n                    nextPosition = POSITIONS[currentPositionIndex];\r\n                    if (this.positionsTried.indexOf(nextPosition) === -1) {\r\n                        break;\r\n                    }\r\n                    currentPositionIndex++;\r\n                }\r\n                /* eslint-enable */\r\n                return nextPosition;\r\n            case 'opposite':\r\n                // just return opposite direction\r\n                switch (this.state.position) {\r\n                    case 'left center':\r\n                        return (this.positionsTried.indexOf('right center') === -1) ? 'right center' : null;\r\n                    case 'right center':\r\n                        return (this.positionsTried.indexOf('left center') === -1) ? 'left center' : null;\r\n                    case 'top left':\r\n                        return (this.positionsTried.indexOf('bottom left') === -1) ? 'bottom left' : null;\r\n                    case 'top center':\r\n                        return (this.positionsTried.indexOf('bottom center') === -1) ? 'bottom center' : null;\r\n                    case 'top right':\r\n                        return (this.positionsTried.indexOf('bottom right') === -1) ? 'bottom right' : null;\r\n                    case 'bottom left':\r\n                        return (this.positionsTried.indexOf('top left') === -1) ? 'top left' : null;\r\n                    case 'bottom center':\r\n                        return (this.positionsTried.indexOf('top center') === -1) ? 'top center' : null;\r\n                    case 'bottom right':\r\n                        return (this.positionsTried.indexOf('top right') === -1) ? 'top right' : null;\r\n                    default:\r\n                        return null;\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return true if element is off screen\r\n     * @param targetPosition\r\n     */\r\n    requestCloseWhenOffScreen(targetPosition) {\r\n        if (targetPosition.top < 0 || targetPosition.top > window.innerHeight\r\n        || targetPosition.left < 0 || targetPosition.left > window.innerWidth) {\r\n            this.props.onRequestClose();\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Return popup position by taking account of elements boundaries and current this.state.position\r\n     * @param position\r\n     * @param targetPosition\r\n     * @param popupDimensions\r\n     * @param margin {number}\r\n     */\r\n    calculatePopupPosition(position, targetPosition, popupDimensions, margin) {\r\n        let offset = this.props.offset;\r\n        let distanceAway = this.props.distanceAway;\r\n\r\n        switch (position) {\r\n            case 'top left':\r\n                return {\r\n                    left: targetPosition.left + offset,\r\n                    top: targetPosition.top - popupDimensions.height - margin - distanceAway\r\n                };\r\n            case 'top center':\r\n                return {\r\n                    left: targetPosition.center - popupDimensions.center + offset,\r\n                    top: targetPosition.top - popupDimensions.height - margin - distanceAway\r\n                };\r\n            case 'top right':\r\n                return {\r\n                    left: targetPosition.right - popupDimensions.width - offset,\r\n                    top: targetPosition.top - popupDimensions.height - margin - distanceAway\r\n                };\r\n            case 'left center':\r\n                return {\r\n                    left: targetPosition.left - popupDimensions.width - margin - distanceAway,\r\n                    top: targetPosition.middle - popupDimensions.middle + offset\r\n                };\r\n            case 'right center':\r\n                // not needed here to take margins into account\r\n                return {\r\n                    left: targetPosition.right + distanceAway,\r\n                    top: targetPosition.middle - popupDimensions.middle + offset\r\n                };\r\n            case 'bottom left':\r\n                return {\r\n                    left: targetPosition.left + offset,\r\n                    top: targetPosition.bottom + distanceAway\r\n                };\r\n            case 'bottom center':\r\n                return {\r\n                    left: targetPosition.center - popupDimensions.center + offset,\r\n                    top: targetPosition.bottom + distanceAway\r\n                };\r\n            case 'bottom right':\r\n                return {\r\n                    left: targetPosition.right - popupDimensions.width - offset,\r\n                    top: targetPosition.bottom + distanceAway\r\n                };\r\n        }\r\n    }\r\n\r\n}\r\n"]}