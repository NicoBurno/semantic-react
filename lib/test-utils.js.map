{"version":3,"sources":["../src/components/test-utils.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;qBACkB,OAAO;;;;oBACF,MAAM;;sBACE,QAAQ;;AAEvC,IAAM,aAAa,GAAG;AAClB,SAAK,EAAE;AACH,kBAAU,EAAE,OAAO;KACtB;AACD,aAAS,EAAE,MAAM;CACpB,CAAC;;AAEK,SAAS,2BAA2B,CAAC,SAAS,EAAE,KAAK,EAAE;AAC1D,MAAE,CAAC,0BAA0B,EAAE,YAAM;;AAEjC,YAAI,OAAO,GAAG,qBAAQ,iCAAC,SAAS,eAAK,KAAK;AACtC,yBAAU,MAAM;AAChB,oBAAQ,EAAC,MAAM,IAAG,CAAC,CAAC;;AAExB,0BAAO,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;AAClD,0BAAO,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;KACpD,CAAC,CAAC;CACN;;AAEM,SAAS,oCAAoC,CAAC,SAAS,EAAE,KAAK,EAAE;AACnE,YAAQ,CAAC,4BAA4B,EAAE,YAAM;AACzC,UAAE,CAAC,yBAAyB,EAAE,YAAM;;;;;AAKhC,gBAAI,OAAO,GAAG,qBAAQ;;;gBAAK,iCAAC,SAAS,EAAK,KAAK,CAAI;aAAM,CAAC,CAAC;;;AAG3D,gBAAI,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;;AAEzD,iBAAK,IAAI,IAAI,IAAI,KAAK,EAAE;AACpB,kCAAO,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;;;AAGhE,oBAAI,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,WAAW,EAAE;AACpD,iCAAO,IAAI,CAAC,IAAI,EAAE,IAAI,iDAA8C,IAAI,CAAG,CAAC;iBAC/E;aACJ;SACJ,CAAC,CAAC;;AAEH,UAAE,CAAC,uBAAuB,EAAE,YAAM;AAC9B,gBAAI,OAAO,GAAG,qBAAQ;;;gBAAK,iCAAC,SAAS,eAAK,KAAK,EAAM,aAAa,EAAG;aAAM,CAAC,CAAC;AAC7E,gBAAI,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;;AAEzD,iBAAK,IAAI,IAAI,IAAI,aAAa,EAAE;AAC5B,kCAAO,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;AACxE,oBAAI,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,WAAW,EAAE;AACpD,iCAAO,IAAI,CAAC,IAAI,EAAE,IAAI,sDAAoD,IAAI,CAAG,CAAC;iBACrF;aACJ;SAEJ,CAAC,CAAC;;AAEH,mCAA2B,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;KACjD,CAAC,CAAC;CACN","file":"test-utils.js","sourcesContent":["/* eslint-disable react/jsx-max-props-per-line */\r\nimport React from 'react';\r\nimport { expect } from 'chai';\r\nimport { shallow, mount } from 'enzyme';\r\n\r\nconst standardProps = {\r\n    style: {\r\n        background: 'green'\r\n    },\r\n    className: 'test'\r\n};\r\n\r\nexport function itShouldPassUnusedDataProps(Component, props) {\r\n    it('passes unused data props', () => {\r\n\r\n        let wrapper = shallow(<Component {...props}\r\n            data-test=\"test\"\r\n            dataTest=\"test\" />);\r\n\r\n        expect(wrapper).to.have.prop('data-test', 'test');\r\n        expect(wrapper).to.have.prop('dataTest', 'test');\r\n    });\r\n}\r\n\r\nexport function itShouldConsumeOwnAndPassCustomProps(Component, props) {\r\n    describe('should properly pass props', () => {\r\n        it('consumes all used props', () => {\r\n            // Funny trick to check component and it's rendered output\r\n            // We need validate both props passed to component and props for component's rendered output\r\n            // If we do shallow(<Component {...props}/>) then shallow renderer will do component rendering instead\r\n            // Actually component rendering will be performed later\r\n            let wrapper = shallow(<div><Component {...props} /></div>);\r\n            \r\n            // Here the new wrapper for component rendered output\r\n            let componentWrapper = wrapper.find(Component).shallow();\r\n\r\n            for (let prop in props) {\r\n                expect(wrapper.find(Component)).to.have.prop(prop, props[prop]);\r\n                // Check if rendered output doesn't contain consumed prop\r\n                // Using expect.fail() here to prevent standard error to avoid confusion, since it will display component name\r\n                if (typeof componentWrapper.prop(prop) !== 'undefined') {\r\n                    expect.fail(null, null, `Rendered output shouldn't have property: ${prop}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        it('passes standard props', () => {\r\n            let wrapper = shallow(<div><Component {...props} {...standardProps}/></div>);\r\n            let componentWrapper = wrapper.find(Component).shallow();\r\n            \r\n            for (let prop in standardProps) {\r\n                expect(wrapper.find(Component)).to.have.prop(prop, standardProps[prop]);\r\n                if (typeof componentWrapper.prop(prop) === 'undefined') {\r\n                    expect.fail(null, null, `Rendered output should have standard property: ${prop}`);\r\n                }\r\n            }\r\n            \r\n        });\r\n\r\n        itShouldPassUnusedDataProps(Component, props);\r\n    });\r\n}\r\n\r\n"]}