{"version":3,"sources":["../src/components/test-utils.jsx"],"names":[],"mappings":";;;;;;;;;QAYgB;QAYA;;;;;;;;;;;;AAnBhB,IAAM,gBAAgB;AAClB,WAAO;AACH,oBAAY,OAAZ;KADJ;AAGA,eAAW,MAAX;CAJE;;AAOC,SAAS,2BAAT,CAAqC,SAArC,EAAgD,KAAhD,EAAuD;AAC1D,OAAG,0BAAH,EAA+B,YAAM;;AAEjC,YAAI,UAAU,qBAAQ,8BAAC,SAAD,eAAe;AACjC,yBAAU,MAAV;AACA,sBAAS,MAAT,GAFkB,CAAR,CAAV,CAF6B;;AAMjC,0BAAO,OAAP,EAAgB,EAAhB,CAAmB,IAAnB,CAAwB,IAAxB,CAA6B,WAA7B,EAA0C,MAA1C,EANiC;AAOjC,0BAAO,OAAP,EAAgB,EAAhB,CAAmB,IAAnB,CAAwB,IAAxB,CAA6B,UAA7B,EAAyC,MAAzC,EAPiC;KAAN,CAA/B,CAD0D;CAAvD;;AAYA,SAAS,oCAAT,CAA8C,SAA9C,EAAyD,KAAzD,EAAgE;AACnE,aAAS,4BAAT,EAAuC,YAAM;AACzC,WAAG,yBAAH,EAA8B,YAAM;;;;;AAKhC,gBAAI,UAAU,qBAAQ;;;gBAAK,8BAAC,SAAD,EAAe,KAAf,CAAL;aAAR,CAAV;;;AAL4B,gBAQ5B,mBAAmB,QAAQ,IAAR,CAAa,SAAb,EAAwB,OAAxB,EAAnB,CAR4B;;AAUhC,iBAAK,IAAI,IAAJ,IAAY,KAAjB,EAAwB;AACpB,kCAAO,QAAQ,IAAR,CAAa,SAAb,CAAP,EAAgC,EAAhC,CAAmC,IAAnC,CAAwC,IAAxC,CAA6C,IAA7C,EAAmD,MAAM,IAAN,CAAnD;;;AADoB,oBAIhB,OAAO,iBAAiB,IAAjB,CAAsB,IAAtB,CAAP,KAAuC,WAAvC,EAAoD;AACpD,iCAAO,IAAP,CAAY,IAAZ,EAAkB,IAAlB,iDAAoE,IAApE,EADoD;iBAAxD;aAJJ;SAV0B,CAA9B,CADyC;;AAqBzC,WAAG,uBAAH,EAA4B,YAAM;AAC9B,gBAAI,UAAU,qBAAQ;;;gBAAK,8BAAC,SAAD,eAAe,OAAW,cAA1B,CAAL;aAAR,CAAV,CAD0B;AAE9B,gBAAI,mBAAmB,QAAQ,IAAR,CAAa,SAAb,EAAwB,OAAxB,EAAnB,CAF0B;;AAI9B,iBAAK,IAAI,IAAJ,IAAY,aAAjB,EAAgC;AAC5B,kCAAO,QAAQ,IAAR,CAAa,SAAb,CAAP,EAAgC,EAAhC,CAAmC,IAAnC,CAAwC,IAAxC,CAA6C,IAA7C,EAAmD,cAAc,IAAd,CAAnD,EAD4B;AAE5B,oBAAI,OAAO,iBAAiB,IAAjB,CAAsB,IAAtB,CAAP,KAAuC,WAAvC,EAAoD;AACpD,iCAAO,IAAP,CAAY,IAAZ,EAAkB,IAAlB,sDAA0E,IAA1E,EADoD;iBAAxD;aAFJ;SAJwB,CAA5B,CArByC;;AAkCzC,oCAA4B,SAA5B,EAAuC,KAAvC,EAlCyC;KAAN,CAAvC,CADmE;CAAhE","file":"test-utils.js","sourcesContent":["/* eslint-disable react/jsx-max-props-per-line */\r\nimport React from 'react';\r\nimport { expect } from 'chai';\r\nimport { shallow, mount } from 'enzyme';\r\n\r\nconst standardProps = {\r\n    style: {\r\n        background: 'green'\r\n    },\r\n    className: 'test'\r\n};\r\n\r\nexport function itShouldPassUnusedDataProps(Component, props) {\r\n    it('passes unused data props', () => {\r\n\r\n        let wrapper = shallow(<Component {...props}\r\n            data-test=\"test\"\r\n            dataTest=\"test\" />);\r\n\r\n        expect(wrapper).to.have.prop('data-test', 'test');\r\n        expect(wrapper).to.have.prop('dataTest', 'test');\r\n    });\r\n}\r\n\r\nexport function itShouldConsumeOwnAndPassCustomProps(Component, props) {\r\n    describe('should properly pass props', () => {\r\n        it('consumes all used props', () => {\r\n            // Funny trick to check component and it's rendered output\r\n            // We need validate both props passed to component and props for component's rendered output\r\n            // If we do shallow(<Component {...props}/>) then shallow renderer will do component rendering instead\r\n            // Actually component rendering will be performed later\r\n            let wrapper = shallow(<div><Component {...props} /></div>);\r\n            \r\n            // Here the new wrapper for component rendered output\r\n            let componentWrapper = wrapper.find(Component).shallow();\r\n\r\n            for (let prop in props) {\r\n                expect(wrapper.find(Component)).to.have.prop(prop, props[prop]);\r\n                // Check if rendered output doesn't contain consumed prop\r\n                // Using expect.fail() here to prevent standard error to avoid confusion, since it will display component name\r\n                if (typeof componentWrapper.prop(prop) !== 'undefined') {\r\n                    expect.fail(null, null, `Rendered output shouldn't have property: ${prop}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        it('passes standard props', () => {\r\n            let wrapper = shallow(<div><Component {...props} {...standardProps}/></div>);\r\n            let componentWrapper = wrapper.find(Component).shallow();\r\n            \r\n            for (let prop in standardProps) {\r\n                expect(wrapper.find(Component)).to.have.prop(prop, standardProps[prop]);\r\n                if (typeof componentWrapper.prop(prop) === 'undefined') {\r\n                    expect.fail(null, null, `Rendered output should have standard property: ${prop}`);\r\n                }\r\n            }\r\n            \r\n        });\r\n\r\n        itShouldPassUnusedDataProps(Component, props);\r\n    });\r\n}\r\n\r\n"]}